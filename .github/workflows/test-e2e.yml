#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This action run e2e test for pull requests
name: test-e2e
on:
  pull_request:
    branches: [main]
    paths:
      - "**.go"
      - "Makefile"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
      - "test/**"
      - "e2e/**"
      - "devops/**"
      - "config-ui/**"
jobs:
  e2e-mysql:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0.26
        env:
          MYSQL_DATABASE: lake
          MYSQL_USER: merico
          MYSQL_PASSWORD: merico
          MYSQL_ROOT_PASSWORD: root
    container: mericodev/lake-builder:latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache test-e2e
        id: cache-test-e2e
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Test
        if: ${{ steps.check-paths.outputs.paths_changed == 'true' }}
        env:
          DB_URL: mysql://root:root@db:3306/lake?charset=utf8mb4&parseTime=True
          E2E_DB_URL: mysql://root:root@db:3306/lake?charset=utf8mb4&parseTime=True
        run: |
          cp .env.example backend/.env
          cd backend
      - name:  Check paths
        id:  filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/core/**'
              - 'backend/impls/**'
              - 'backend/helpers/**'
            ae:
              - 'frontend/**'
            azure:
              - 'backend/plugins/azure/**'
            bamboo:
              - 'backend/plugins/bamboo/**'
            bitbucket:
              - 'backend/plugins/bitbucket/**'
            customize:
              - 'backend/plugins/customize/**'
            dbt:
              - 'backend/plugins/dbt/**'
            dora:
              - 'backend/plugins/dora/**'
            feishu:
              - 'backend/plugins/feishu/**'
            gitee:
              - 'backend/plugins/gitee/**'
            gitextractor:
              - 'backend/plugins/gitextractor/**'
            github:
              - 'backend/plugins/github/**'
            github_graphql:
              - 'backend/plugins/github_graphql/**'
            gitlab:
              - 'backend/plugins/gitlab/**'
            icla:
              - 'backend/plugins/icla/**'
            jenkins:
              - 'backend/plugins/jenkins/**'
            jira:
              - 'backend/plugins/jira/**'
            org:
              - 'backend/plugins/org/**'
            pagerduty:
              - 'backend/plugins/pagerduty/**'
            refdiff:
              - 'backend/plugins/refdiff/**'
            sonarqube:
              - 'backend/plugins/sonarqube/**'
            starrocks:
              - 'backend/plugins/starrocks/**'
            tapd:
              - 'backend/plugins/tapd/**'
            webhook:
              - 'backend/plugins/webhook/**'
            zentao:
              - 'backend/plugins/zentao/**'
      # run only if 'backend' files were changed
      - name: backend tests
        if: steps.filter.outputs.backend == 'true'
        run: |
            make e2e-test
            cd ..
      # make e2e-plugins-test
      - name: ae tests
        if: steps.filter.outputs.ae == 'true'
        run: |
            for m in $$(go list ./plugins/ae/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: azure tests
        if: steps.filter.outputs.azure == 'true'
        run: |
            for m in $$(go list ./plugins/azure/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: bamboo tests
        if: steps.filter.outputs.bamboo == 'true'
        run: |
            for m in $$(go list ./plugins/bamboo/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: bitbucket tests
        if: steps.filter.outputs.bitbucket == 'true'
        run: |
            for m in $$(go list ./plugins/bitbucket/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: customize tests
        if: steps.filter.outputs.customize == 'true'
        run: |
            for m in $$(go list ./plugins/customize/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: dbt tests
        if: steps.filter.outputs.dbt == 'true'
        run: |
            for m in $$(go list ./plugins/dbt/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: dora tests
        if: steps.filter.outputs.dora == 'true'
        run: |
            for m in $$(go list ./plugins/dora/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: feishu tests
        if: steps.filter.outputs.feishu == 'true'
        run: |
            for m in $$(go list ./plugins/feishu/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: gitee tests
        if: steps.filter.outputs.gitee == 'true'
        run: |
            for m in $$(go list ./plugins/gitee/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: gitextractor tests
        if: steps.filter.outputs.gitextractor == 'true'
        run: |
            for m in $$(go list ./plugins/gitextractor/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: github tests
        if: steps.filter.outputs.github == 'true'
        run: |
            for m in $$(go list ./plugins/github/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: github_graphql tests
        if: steps.filter.outputs.github_graphql == 'true'
        run: |
            for m in $$(go list ./plugins/github_graphql/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: gitlab tests
        if: steps.filter.outputs.gitlab == 'true'
        run: |
            for m in $$(go list ./plugins/gitlab/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: icla tests
        if: steps.filter.outputs.icla == 'true'
        run: |
            for m in $$(go list ./plugins/icla/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: jenkins tests
        if: steps.filter.outputs.jenkins == 'true'
        run: |
            for m in $$(go list ./plugins/jenkins/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: jira tests
        if: steps.filter.outputs.jira == 'true'
        run: |
            for m in $$(go list ./plugins/jira/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: org tests
        if: steps.filter.outputs.org == 'true'
        run: |
            for m in $$(go list ./plugins/org/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: pagerduty tests
        if: steps.filter.outputs.pagerduty == 'true'
        run: |
            for m in $$(go list ./plugins/pagerduty/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: refdiff tests
        if: steps.filter.outputs.refdiff == 'true'
        run: |
            for m in $$(go list ./plugins/refdiff/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: sonarqube tests
        if: steps.filter.outputs.sonarqube == 'true'
        run: |
            for m in $$(go list ./plugins/sonarqube/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: starrocks tests
        if: steps.filter.outputs.starrocks == 'true'
        run: |
            for m in $$(go list ./plugins/starrocks/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: tapd tests
        if: steps.filter.outputs.tapd == 'true'
        run: |
            for m in $$(go list ./plugins/tapd/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: webhook tests
        if: steps.filter.outputs.webhook == 'true'
        run: |
            for m in $$(go list ./plugins/webhook/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
      - name: zentao tests
        if: steps.filter.outputs.webhook == 'true'
        run: |
            for m in $$(go list ./plugins/zentao/... | egrep 'e2e'); do echo $$m; go test -timeout 300s -gcflags=all=-l -v $$m; done
  #            make e2e-plugins-test
#  e2e-postgres:
#    runs-on: ubuntu-latest
#    services:
#      db:
#        image: postgres:14.2
#        env:
#          POSTGRES_DB: lake
#          POSTGRES_USER: merico
#          POSTGRES_PASSWORD: merico
#    container: mericodev/lake-builder:latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Cache test-e2e-pg
#        id: cache-test-e2e-pg
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cache/go-build
#            ~/go/pkg/mod
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.os }}-go-
#      - name: Test-pg
#        env:
#          DB_URL: postgres://merico:merico@db:5432/lake
#          E2E_DB_URL: postgres://merico:merico@db:5432/lake
#        run: |
#          cp .env.example backend/.env
#          cd backend
#          make e2e-test
#          make e2e-plugins-test
